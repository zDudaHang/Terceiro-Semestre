2.19.1 a)

int compare (int a, int b) {
	if (sub(a,b) >= 0) {
		return 1;
	} else {
		return 0;
	}
}

int sub (int a, int b) {
	return a - b;
}

SUB: sub $v0, $a0, $a1
	 jr $ra

COMPARE: addi $sp, $sp, -4
		 sw $ra, 0 ($sp)
		 jal SUB
		 slt $t0, $v0, $0 # $t0 = 1 <=> sub(a,b) < 0 || $t0 = 0 <=> sub(a,b) >= 0
		 beq $t0, $0, L1  # Se sub(a,b) >= vÃ¡ para L1
		 addi $v0, $0, 0
		 j DONE
L1: 	 addi $v0, $0, 1
DONE: 	 lw $ra, 0 ($sp)
		 addi $sp, $sp, 4
		 jr $ra

------------------------------------------------------- // -------------------------------------------------------

2.19.1 b)

int fib_iter(int a, int b, int n) {
	if (n == 0) {
		return b;
	} else {
		return fib_iter(a + b, a, n - 1);
	}
}

--> Preciso guardar a, b, n?

FIB_ITER: addi $sp, $sp, -4
		  sw $ra, 0 ($sp)
		  beq $a2, $0, L1
		  addi $a2, $a2, -1 # n - 1
		  add $t0, $a0, $0 
		  add $a0, $a0, $a1 # a + b 
		  add $a1, $t0, $0 # a
		  jal FIB_ITER
		  j DONE
L1:		  add $v0, $a1, $0
DONE:	  lw $ra, 0 ($sp)
		  addi $sp, $sp, 4
		  jr $ra

------------------------------------------------------- // -------------------------------------------------------

2.19.2 a)

int compare (int a, int b) {
	if (a - b >= 0) {
		return 1;
	} else {
		return 0;
	}
}

int sub (int a, int b) {
	return a - b;
}

COMPARE: sub $t1, $a0, $a1
		 slt $t0, $t1, $0
		 beq $t0, $0, L1
		 addi $v0, $0, 0
		 j DONE
L1: 	 addi $v0, $0, 1
DONE:	 jr $ra

------------------------------------------------------- // -------------------------------------------------------

2.19.2 b)

int fib_iter(int a, int b, int n) {
	if (n == 0) {
		return b;
	} else {
		return 5a + 3b;
	}
}

FIB_ITER: beq $a2, $0, L1
		  addi $t0, $0, 5
		  addi $t1, $0, 3
		  mul $t2, $t0, $a0 # 5a
		  mul $t3, $t1, $a1 # 3b
		  add $v0, $t2, $t3
		  j DONE
L1:		  add $v0, $a1, $0
DONE:	  jr $ra

