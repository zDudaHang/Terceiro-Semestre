2.33. a)
int find (int a[], int n, int x) {
	int i;
	for (i = 0; i != n; i++) {
		if (a[i] == x) {
			return i;
		}
		return -1;
	}
}

Versão Pointer :
int find (int* p, int n, int x) {
	int i;
	for (i = 0; i != n; i++) {
		if ( *(p+i) == x ) {
			return i;
		}
		return -1;
	}
}

ASSEMBLY S/POINTER
FIND: add $t0, $0, $0
LOOP: beq $t0, $a1, DONE
	  sll $t1, $t0, 2
	  add $t1, $t1, $a0
	  lw $t2, 0 ($t1)
	  bne $t2, $a2, LOOP
	  add $v0, $t0, $0
	  jr $ra	
DONE: addi $v0, $0, -1
	  jr $ra

ASSEMBLY C/POINTER
FIND: add $t0, $0, $0
LOOP: beq $a0, $a1, DONE
	  lw $t1, 0 ($a0)
	  beq $t1, $a2, L1
	  addi $a0, $a0, 4
	  addi $t0, $t0, 1
	  j LOOP
L1:   add $v0, $t0, $0
	  jr $ra
DONE: addi $v0, $0, -1
	  jr $ra

------------------------------------------------------------------------------------------------------------

2.33 b)
int count(int a[], int n, int x) {
	int res = 0;
	int i;
	for (i = 0; i != n; i++) {
		if (a[i] == x) {
			res++;
		}
		return ress;
	}
}

Versão Pointer :
int count(int* p, int n, int x) {
	int res = 0;
	int i;
	for (i = 0; i != n; i++) {
		if ( *(p+i) == x ) {
			res++;
		}
		return res;
	}
}

ASSEMBLY S/POINTER :
COUNT: add $t0, $0, $0 #i
	   add $t1, $0, $0 #res
LOOP:  beq $t0, $a1, DONE
	   sll $t2, $t0, 2
	   add $t2, $t2, $a0
	   lw $t3, 0 ($t2) # a[i]
	   bne $t3, $a2, LOOP
	   addi $t1, $t1, 1
	   j LOOP
DONE:  add $v0, $t1, $0
	   jr $ra

ASSEMBLY C/POINTER :
COUNT: add $t0, $0, $0 # res
	   sll $a1, $a1, 2
LOOP:  bne $a0, $a1, DONE
	   lw $t1, 0 ($a0)
	   addi $a0, $a0, 4
	   bne $t1, $a2, LOOP
	   addi $t0, $t0, 1
	   j LOOP
DONE:  add $v0, $t0, $0
	   jr $ra

